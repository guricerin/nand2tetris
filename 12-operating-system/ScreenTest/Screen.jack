// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean _black;
    static int _ramStart;
    static int _ramEnd;
    static int _startX, _endX, _startY, _endY;
    static Array _twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        let _black = true;
        let _ramStart = 16384;
        let _ramEnd = 24576;

        let _twoToThe = Array.new(16);
        let _twoToThe[0] = 1;
        let i = 1;
        while (i < 16) {
            let _twoToThe[i] = _twoToThe[i-1] + _twoToThe[i-1];
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = _ramStart;
        while (i < _ramEnd)) {
            // ç™½
            do Memory.poke(i, false);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let _black = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, mask;
        var int word;
        let addr = _ramStart + (y * 32) + (x / 16);
        // x % 16
        let mask = _twoToThe[x & 15];
        let word = Memory.peek(addr);

        if (_black) {
            let word = word | mask;
        } else {
            let word = word & ~mask;
        }
        do Memory.poke(addr, word);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dy, dx;
        var int swap;

        if (x2 < x1) {
            let swap = x1;
            let x1 = x2;
            let x2 = x1;
            let swap = y1;
            let y1 = y2;
            let y2 = y1;
        }
        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dx = 0) {
            do Screen.drawHorizontalLine(x1, y1, y2);
        } else {
            if (dy = 0) {
                do Screen.drawVerticalLine(x1, x2, y1);
            } else {
                do Screen.drawDiagonalLine(x1, y1, x2, y2, dx, dy);
            }
        }
        return;
    }

    function void drawVerticalLine(int x1, int y1, int y2) {
        while (~(y2 < y1)) {
            do Screen.drawPixel(x1, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    function void drawHorizontalLine(int y1, int x1, int x2) {
        while (~(x2 < x1)) {
            do Screen.drawPixel(x1, y1);
            let x1 = x1 + 1;
        }
        return;
    }

    function void drawDiagonalLine( int x1, int y1, int x2, int y2, int dx, int dy ) {
        var int a, b;
        var int adyMinusbdx;
        var int y_incr;

        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;

        if( dy < 0 ) {
            let y_incr = -1;
        }
        else {
            let y_incr = 1;
        }

        while( ~(a > dx) & (((y_incr = 1) & ~(b > dy)) | ((y_incr = -1) & ~(b < dy))) ) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if(adyMinusbdx < 0) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + (dy * y_incr);
            }
            else {
                let b = b + y_incr;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(x1 > x2)) {
            do Screen.drawLine(x1, y1, x1, y2);
            let x1 = x1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, tmp;
        let dy= -r;
        while (~(dy > r)) {
            let tmp = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x - tmp, y + dy, x + tmp, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
